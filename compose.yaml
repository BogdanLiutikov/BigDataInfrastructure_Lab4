version: '3.8'
services:
  web:
    container_name: mle-container
    build: .
    # command: bash -c "python -m src.preprocess && python -m src.train && python -m src.predict -m RandomForestClassifier -t smoke && coverage run -m src.unit_tests.test_preprocess && coverage run -m -a src.unit_tests.test_training && coverage report -m"
    command: python -m src.server
    ports:
      - 8000:8000
    image: bogdanliutikov/lab4:latest
    volumes:
      - type: bind
        source: .
        target: /app
    environment:
      ACCEPT_EULA: "Y"
      VAULT_TOKEN: ${VAULT_TOKEN}
      TZ: Europe/Moscow
    networks:
      - sharenetwork
    depends_on:
      database:
        condition: service_healthy
      vault:
        condition: service_started
      kafka:
        condition: service_started

  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 1433:1433
    container_name: mssql
    hostname: mssql
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
      TZ: Europe/Moscow
    networks:
      - sharenetwork
    healthcheck:
        test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "${MSSQL_USER}", "-P", "${MSSQL_SA_PASSWORD}"]
        interval: 30s
        timeout: 10s
        retries: 10
    volumes:
      - type: volume
        source: db-data-lab3
        target: /var/opt/mssql

  vault:
    image: hashicorp/vault:latest
    container_name: vault-server
    command: sh /vault/init/vault-init-dev.sh
    # command: vault server -config=vault/config/config.hcl
    ports:
      - "8200:8200"
      - "8201:8201"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      # VAULT_API_ADDR: "0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      MSSQL_USER: ${MSSQL_USER}
      MSSQL_SA_PASSWORD: ${MSSQL_SA_PASSWORD}
    volumes:
    #   - type: bind
    #     source: ./vault
    #     target: /vault
      - type: bind
        source: ./vault/init
        target: /vault/init
    cap_add:
      - IPC_LOCK
    networks:
      - sharenetwork

  zoo1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo1
    container_name: zoo1
    ports:
    - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - sharenetwork

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    # command: bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic my-topic --partitions 1 --replication-factor 1
    ports:
      - "9092:9092"
    environment:
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://:9092
      # KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      database:
        condition: service_healthy
      vault:
        condition: service_started
      zoo1:
        condition: service_started
    networks:
      - sharenetwork

volumes:
  db-data-lab3:

networks:
  sharenetwork:
    driver: bridge
